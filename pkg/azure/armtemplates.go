// Code generated by go-bindata.
// sources:
// pkg/azure/templates/acr.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgAzureTemplatesAcrJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6b\xdb\x40\x10\xbd\xfb\x57\x0c\xdb\x42\x5a\x88\xf5\x11\x28\x05\xdf\x42\xe9\xa1\xf4\x83\x52\x3b\xb9\x84\x1c\xc6\xbb\x23\x6b\x1b\xed\xae\xd8\x1d\xa5\xb8\xc5\xff\xbd\xac\x3e\x2c\x2b\xb8\x4d\x6d\x8a\x0e\x42\x3b\xf3\x66\xde\x5b\xbd\xf7\x6b\x06\x20\x5e\x06\x59\x92\x41\xb1\x00\x51\x32\xd7\x61\x91\xa6\xdd\x49\x62\xd0\xe2\x86\x0c\x59\x4e\xf0\x67\xe3\x29\x91\xce\xf4\xb5\x90\x5e\x65\xf9\x9b\x79\x96\xcf\xb3\x3c\x55\x54\x57\x6e\x1b\xfb\x56\x64\xea\x0a\x99\x92\xef\xc1\xd9\x17\xe2\x32\xce\x97\xce\x32\x59\xbe\x25\x1f\xb4\xb3\x71\x4d\x9e\x64\xf1\xe9\xca\x35\x7a\x34\xc4\xe4\x83\x58\x40\x24\x04\x20\x3c\x6d\x74\x60\xbf\xfd\x82\x86\xf6\xa7\x00\x82\xb7\x75\xfc\x16\x81\xbd\xb6\x9b\x16\xdf\x9e\x1b\x62\x54\xc8\x78\xd0\x0b\x20\x14\x05\xe9\x75\xcd\xfd\xd6\x55\x49\x60\xd1\x10\xb8\x02\xb8\x24\x88\xbc\x50\x5b\xf2\x30\xac\x4b\x44\x0f\xde\xb5\xef\xdd\xe5\x94\xcd\x27\x27\xb1\x1f\xf6\xff\x18\x55\xfd\xd0\xbf\xb0\x82\x55\xa9\x03\x48\xb4\xd6\x31\xac\x09\x64\x89\x76\x43\x0a\xb0\x60\xf2\x2d\xc8\x53\x70\x8d\x97\x04\xb1\xcf\x13\x32\xa9\x67\xb4\x2c\x1f\x9a\x7f\x91\xa1\xa8\xc0\xa6\xe2\x5b\xac\x9a\xb6\xbe\x64\xb4\x0a\xbd\x3a\x43\xe8\xf2\xe3\xcd\xd9\x37\x7f\x5d\xeb\xd1\x3e\x27\x93\xbe\xca\xf2\xb7\xf3\x3c\x9b\x67\xf9\x19\xb4\xaf\xbf\x7e\x80\xc7\x6e\xf7\xc9\xf4\x51\x19\x6d\x6f\x02\xf9\xf7\x16\xd7\x15\xa9\x63\xe4\xd7\xce\x55\x7f\xa4\x5e\x60\x15\xe8\x74\xce\x8f\x11\x0e\x5c\x22\x83\xb6\x4a\x4b\x64\x0a\xf0\xa3\x24\x2e\x7b\xbf\xb4\xc4\xa0\x09\xe4\xa3\x63\xa8\x63\xf7\x54\xc4\xac\x17\x22\x06\x77\xc5\x80\xde\xb5\xb5\xbd\x0a\xdb\x05\x54\xdc\x8d\x29\x7e\x75\x71\x98\xde\x8b\xd7\xf7\xa3\xba\x41\xf3\x67\x2d\xbd\x0b\xae\xe0\xe4\xdd\x70\x95\xdf\x7a\x4c\xda\x83\x35\x85\x11\x57\x8d\xc1\x3b\xbe\x69\x48\xe6\x64\x1b\x1e\x9a\xe6\x38\x6e\xf4\xd5\x04\x19\x26\xe1\x78\x4e\xe6\xf2\xa1\x89\xe8\xe1\xf2\xf6\x53\x6a\xef\x6a\xf2\xac\x29\x4c\x87\x1d\x71\xc5\x74\xf0\xd3\x86\xc3\xe9\xfb\x5f\x73\x3f\xdb\xfd\x0e\x00\x00\xff\xff\x2a\x1c\x63\x7a\xbe\x05\x00\x00")

func pkgAzureTemplatesAcrJsonBytes() ([]byte, error) {
	return bindataRead(
		_pkgAzureTemplatesAcrJson,
		"pkg/azure/templates/acr.json",
	)
}

func pkgAzureTemplatesAcrJson() (*asset, error) {
	bytes, err := pkgAzureTemplatesAcrJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/azure/templates/acr.json", size: 1470, mode: os.FileMode(420), modTime: time.Unix(1544685337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/azure/templates/acr.json": pkgAzureTemplatesAcrJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"azure": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				"acr.json": &bintree{pkgAzureTemplatesAcrJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

